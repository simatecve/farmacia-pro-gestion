import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';

export interface PurchaseOrder {
  id: string;
  order_number: string;
  supplier_id: string;
  supplier_name?: string;
  status: 'pending' | 'approved' | 'received' | 'cancelled';
  order_date: string;
  expected_delivery_date?: string;
  received_date?: string;
  subtotal: number;
  tax_amount: number;
  total_amount: number;
  notes?: string;
  created_at: string;
  updated_at: string;
  items?: PurchaseOrderItem[];
}

export interface PurchaseOrderItem {
  id: string;
  purchase_order_id: string;
  product_id: string;
  product_name?: string;
  quantity: number;
  unit_price: number;
  total_price: number;
  received_quantity?: number;
}

export function usePurchaseOrders() {
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchPurchaseOrders = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { data, error } = await supabase
        .from('purchase_orders')
        .select(`
          *,
          suppliers(name),
          purchase_order_items(
            *,
            products(name)
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      const ordersWithSupplierNames = data?.map(order => ({
        ...order,
        supplier_name: order.suppliers?.name,
        items: order.purchase_order_items?.map((item: any) => ({
          ...item,
          product_name: item.products?.name
        }))
      })) || [];

      setPurchaseOrders(ordersWithSupplierNames);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error al cargar Ã³rdenes de compra');
    } finally {
      setLoading(false);
    }
  };

  const createPurchaseOrder = async (orderData: Omit<PurchaseOrder, 'id' | 'created_at' | 'updated_at' | 'order_number'>, items: Omit<PurchaseOrderItem, 'id' | 'purchase_order_id'>[]) => {
    try {
      // Create the purchase order (order_number will be auto-generated)
      const { data: orderResult, error: orderError } = await supabase
        .from('purchase_orders')
        .insert([{
          ...orderData,
          order_number: '' // Will be auto-generated by trigger
        }])
        .select()
        .single();

      if (orderError) throw orderError;

      // Create the purchase order items with calculated totals
      if (items.length > 0) {
        const itemsWithOrderId = items.map(item => ({
          ...item,
          purchase_order_id: orderResult.id,
          total_price: item.quantity * item.unit_price
        }));

        const { error: itemsError } = await supabase
          .from('purchase_order_items')
          .insert(itemsWithOrderId);

        if (itemsError) throw itemsError;
      }

      await fetchPurchaseOrders();
      return { success: true, data: orderResult };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error al crear orden de compra';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const updatePurchaseOrder = async (id: string, orderData: Partial<Omit<PurchaseOrder, 'id' | 'created_at' | 'updated_at' | 'order_number'>>) => {
    try {
      const { data, error } = await supabase
        .from('purchase_orders')
        .update({ ...orderData, updated_at: new Date().toISOString() })
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      await fetchPurchaseOrders();
      return { success: true, data };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error al actualizar orden de compra';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const deletePurchaseOrder = async (id: string) => {
    try {
      // First delete order items
      await supabase
        .from('purchase_order_items')
        .delete()
        .eq('purchase_order_id', id);

      // Then delete the order
      const { error } = await supabase
        .from('purchase_orders')
        .delete()
        .eq('id', id);

      if (error) throw error;

      await fetchPurchaseOrders();
      return { success: true };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error al eliminar orden de compra';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const receivePurchaseOrder = async (id: string, receivedItems: { item_id: string; received_quantity: number }[]) => {
    try {
      // Use the database function to receive each item
      for (const item of receivedItems) {
        const { error } = await supabase.rpc('receive_purchase_order_item', {
          p_purchase_order_item_id: item.item_id,
          p_received_quantity: item.received_quantity
        });

        if (error) throw error;
      }

      // Use the database function to check and mark order as received if complete
      const { error: markError } = await supabase.rpc('mark_purchase_order_received', {
        p_purchase_order_id: id
      });

      if (markError) throw markError;

      await fetchPurchaseOrders();
      return { success: true };
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Error al recibir orden de compra';
      setError(errorMessage);
      return { success: false, error: errorMessage };
    }
  };

  const refreshPurchaseOrders = () => {
    fetchPurchaseOrders();
  };

  useEffect(() => {
    fetchPurchaseOrders();
  }, []);

  return {
    purchaseOrders,
    loading,
    error,
    createPurchaseOrder,
    updatePurchaseOrder,
    deletePurchaseOrder,
    receivePurchaseOrder,
    refreshPurchaseOrders,
  };
}